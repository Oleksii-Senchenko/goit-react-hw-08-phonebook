{"version":3,"file":"static/js/166.78c4eca6.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Contactlist/ContactList.module.css?b3ff","components/ContactListItem/ContactListItem.jsx","components/Contactlist/Contactlist.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","Pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"inputField\":\"ContactForm_inputField__qJkou\",\"submitButton\":\"ContactForm_submitButton__8wEUJ\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'redux/contacts/operationsGet';\n// import { getContactsState } from 'redux/contacts/contactsSlice';\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInput = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!name || !number) {\n      return;\n    }\n    const finedNumber = contacts.find(\n      contact =>\n        contact.number && contact.number.toLowerCase() === number.toLowerCase()\n    );\n\n    if (finedNumber) {\n      alert(\n        `In your phoneBook already have this number his name is ${finedNumber.name}`\n      );\n      return;\n    }\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.contactForm} onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Name\"\n        value={name}\n        onChange={handleInput}\n        required\n        className={css.inputField}\n      />\n      <input\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Phone Number\"\n        value={number}\n        onChange={handleInput}\n        required\n        className={css.inputField}\n      />\n      <button type=\"submit\" className={css.submitButton}>\n        Add Contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactList_container__STl4V\",\"title\":\"ContactList_title__Nuzhc\",\"list\":\"ContactList_list__VQ0OB\",\"item\":\"ContactList_item__DQ2xM\",\"name\":\"ContactList_name__+akzn\",\"number\":\"ContactList_number__9Y21c\"};","import React from 'react';\nimport css from '../Contactlist/ContactList.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operationsGet';\n// import { deleteContact } from 'redux/contactsSlice';\n\nfunction ContactListItem({ id, name, number }) {\n  const dispatch = useDispatch();\n  return (\n    <li key={id} className={css.item}>\n      <p className={css.name}>\n        {name}:{number}\n      </p>\n      <button\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default ContactListItem;\n","import css from './ContactList.module.css';\n// import { useSelector, } from 'react-redux';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { getStateFilter } from 'redux/contacts/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getContacts } from 'redux/contacts/operationsGet';\n\nfunction Contactlist() {\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const filter = useSelector(getStateFilter);\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name && contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return (\n    <div className={css.container}>\n      <h2 className={css.title}>Contact List</h2>\n      <ul className={css.list}>\n        {filteredContacts.length !== 0 ? (\n          filteredContacts.map(contact => (\n            <ContactListItem\n              id={contact.id}\n              key={contact.id}\n              name={contact.name}\n              number={contact.number}\n            />\n          ))\n        ) : (\n          <p>List is empty</p>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default Contactlist;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Filter_form__wVnxJ\",\"input\":\"Filter_input__N7T3z\",\"label\":\"Filter_label__vEd1E\"};","import css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { filterList } from 'redux/contacts/filterSlice';\nfunction Filter() {\n  const dispatch = useDispatch();\n\n  const handleСhange = e => {\n    const { value } = e.target;\n    dispatch(filterList(value));\n  };\n\n  return (\n    <form className={css.form}>\n      <label htmlFor=\"\" className={css.label}>\n        find contacts by name\n        <input\n          onChange={handleСhange}\n          type=\"text\"\n          name=\"query\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className={css.input}\n        />\n      </label>\n    </form>\n  );\n}\n\nexport default Filter;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Contactlist from 'components/Contactlist/Contactlist';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsPage = () => {\n  const login = useSelector(state => state.auth.isLoggedIn);\n  return (\n    <div>\n      {login ? (\n        <>\n          <ContactForm />\n          <Filter />\n          <Contactlist />\n        </>\n      ) : (\n        <h1>\n          Hey there! Welcome to my phonebook. Here you can write and save your\n          friends and business contacts.\n        </h1>\n      )}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","dispatch","useDispatch","contacts","useSelector","state","useState","name","setName","number","setNumber","handleInput","e","target","value","className","css","onSubmit","preventDefault","finedNumber","find","contact","toLowerCase","alert","newContact","addContact","type","placeholder","onChange","required","onClick","deleteContact","useEffect","getContacts","filter","getStateFilter","filteredContacts","includes","length","map","htmlFor","filterList","pattern","title","login","auth","isLoggedIn"],"sourceRoot":""}